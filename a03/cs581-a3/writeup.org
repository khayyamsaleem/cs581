#+STARTUP: noindent showall
#+OPTIONS: toc:nil num:nil
#+TITLE: YouTube Data API
#+SUBTITLE: CS581 Assignment 3
#+AUTHOR: Khayyam Saleem
#+LaTeX_HEADER: \usepackage[margin=1.0in]{geometry}

* Purpose
The purpose of the script I wrote to interact with the YouTube API is to, given a word and some number of results, determine the "topic strength" of a word. Essentially, given a search query, it finds the first ~max_results~ video results and yields their title, statistics, and the topics associated with that video. Then, at the end, the union of all of those topics across the search results are presented. Using this, one can determine how closely tied that search query is to a given topic on YouTube. For example, over the first 50 results, the query /"hello"/ is most closely associated with the topic of "music".

* Implementation
The script is implemented in ~Node.js~, a JavaScript runtime. The script authenticates the user, and then requests a search query and number of results through command line input. If none are provided, the query defaults to a search with query ~"cheese"~ and ~max_results = 25~. Once the input is parsed, it makes a request to the YouTube Data API to fetch the results and accumulate them into a list. After it collects those, it iterates over the list to create a custom object that contains the original ~queryString~, as well as the video's ~id~, ~title~, ~statistics~, and ~topicCategories~. The ~topicCategories~ attribute is generated by examining the list of /Wikipedia/ links that YouTube associates with each video, and then cropping out the "head" of the /Wikipedia/ url (30 characters) so that only the topic remains. Then, to generate the final list of topics associated with the original query string, all the lists of topics over the result set are flattened into one list, and a frequency list is generated using this list to yield the "topic strengths".

* Input
- ~search_string : String~
- ~max_results : Integer~

* Output
- Details objects (per video)
  #+BEGIN_SRC javascript :exports code
    {
        "searchQuery": String,
        "id": String,
        "title": String
        "stats": {
            "viewCount": Integer,
            "likeCount": Integer,
            "dislikeCount": Integer,
            "favoriteCount": Integer,
            "commentCount": Integer
        },
        "topicCategories": [String]
    }
  #+END_SRC
- topic frequency mapping (aggregate)
  - ~{ topic: String => frequency: Integer }~
    
* Source
- [[https://github.com/khayyamsaleem/cs581/tree/master/a3/cs581-a3][Repository can be found here.]]
- Authentication code taken from YouTube API Documentation [[https://developers.google.com/youtube/v3/quickstart/nodejs][here]].
  
* Screenshot of Use
#+ATTR_LATEX: :width 400
[[./sample.png]]
